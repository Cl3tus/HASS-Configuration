google_home_resume_perform_resume:
  alias: 00 ðŸ”Š Google Home Resume - Perform resume
  description: Helper script to perform the resume for the Google Home Resume script
  icon: mdi:cast-audio
  mode: parallel
  max: 20
  sequence:
  - alias: State changed since script started?
    wait_template: "{{\n  event_script or\n  (\n    (states[player.entity_id].last_changed\
      \ > as_datetime(start_time))\n    and expand([player.entity_id] + player.members)\n\
      \          | selectattr('state', 'eq', 'playing')\n          | list | count\
      \ > 0\n  )\n}}\n"
    timeout: 00:00:30
  - alias: Add entity to the resume active group
    service: group.set
    data:
      object_id: resume_active_ghresume_{{ context.id }}
      name: Entities which will be resumed by the Google Home Resume script
      icon: mdi:autorenew
      entities: "{%- set current = state_attr('group.resume_active', 'entity_id')\
        \ %} {%- set current = [] if current == none else current | list %} {{ \n\
        \    ( current + [ player.entity_id ] ) | unique | list\n}}\n"
  - alias: Resume needed?
    choose:
    - conditions:
      - alias: State changed since script started?
        condition: template
        value_template: '{{ wait.completed }}'
      sequence:
      - alias: Set variables
        variables:
          spotify: '{{ player.app_name == ''Spotify'' }}

            '
          youtube: '{{ player.app_name in [''YouTube'', ''YouTube Music''] }}

            '
          stream: "{%- set y = ytube_music_data\n            | rejectattr('target',\
            \ 'in', players_to_resume)\n            | map(attribute='target')\n  \
            \          | list\n%} {{\n  player.media_content_id is defined\n  and\
            \ player.media_content_id.startswith('http')\n  and not player.entity_id\
            \ in y\n}}\n"
      - alias: Wait until player is idle again, and all other scripts are finished
        wait_template: "{%- set current = expand(states.group\n                  \
          \  | selectattr('entity_id', 'search', 'group.resume_script_target_')\n\
          \                    | rejectattr('entity_id', 'search', context)\n    \
          \                | map(attribute='entity_id')\n                    | list)\
          \ | map(attribute='entity_id') | list\n%} {%- set checklist = [player.entity_id]\
          \ + player.members %} {{\n  expand(checklist) | rejectattr('state', 'in',\
          \ ['idle', 'off']) | list | count == 0\n  and current | select('eq', player.entity_id)\
          \ | list | count == 0\n}}\n"
      - alias: Set volume to old volume if needed
        choose:
        - conditions:
          - alias: Volume restore needed
            condition: template
            value_template: "{{\n  player.volume_level | round(2, default=0)\n  !=\
              \ state_attr(player.entity_id, 'volume_level') | round(2, default=0)\n\
              }}\n"
          sequence:
          - alias: Player is group?
            choose:
            - conditions: '{{ player.type == ''group'' }}'
              sequence:
              - alias: Restore volume of members
                repeat:
                  count: '{{ player.members | count }}'
                  sequence:
                  - alias: Set volume back to old state
                    service: media_player.volume_set
                    target:
                      entity_id: '{{ player.members[repeat.index -1] }}'
                    data:
                      volume_level: "{{\n  member_data\n    | selectattr('entity_id',\
                        \ 'eq', player.members[repeat.index-1])\n    | map(attribute='volume_level')\n\
                        \    | join\n}}\n"
            default:
            - alias: Set volume back to old state
              service: media_player.volume_set
              target:
                entity_id: '{{ player.entity_id }}'
              data:
                volume_level: '{{ player.volume_level }}'
      - alias: Resume playing
        choose:
        - alias: YouTube?
          conditions: '{{ player.type == ''screen'' and youtube }}'
          sequence:
          - alias: Play video
            service: media_player.play_media
            target:
              entity_id: '{{ player.entity_id }}'
            data:
              media_content_type: cast
              media_content_id: ' { "app_name": "youtube", "media_id": "{{ player.media_content_id
                }}" }'
          - alias: Wait until video is playing
            wait_template: "{{\n  is_state_attr(player.entity_id, 'media_content_id',\
              \ player.media_content_id)\n  and iif(state_attr(player.entity_id, 'media_position'))\n\
              }}\n"
          - alias: Seek
            service: media_player.media_seek
            target:
              entity_id: '{{ player.entity_id }}'
            data:
              seek_position: '{{ [0, player.media_position - 3] | max }}

                '
        - alias: Spotify?
          conditions: '{{ spotify }}'
          sequence:
          - alias: Primary spotcast account?
            choose:
            - conditions: '{{ player.spotcast == ''primary_account'' }}'
              sequence:
              - alias: Resume spotify with primary spotcast account
                service: spotcast.start
                data:
                  entity_id: '{{ player.entity_id }}'
                  force_playback: true
            default:
            - alias: Resume spotify with specific account
              service: spotcast.start
              data:
                entity_id: '{{ player.entity_id }}'
                account: '{{ player.spotcast }}'
                force_playback: true
        - alias: Stream?
          conditions: '{{ stream }}'
          sequence:
          - variables:
              picture_url: '{{ player.fixed_picture if player.fixed_picture is defined
                else player.entity_picture }}'
              metadata:
                metadataType: 3
                title: '{{ player.media_title }}'
                artist: '{{ player.media_artist }}'
              picture:
                images:
                - url: '{{ picture_url }}'
          - alias: Resume stream
            service: media_player.play_media
            target:
              entity_id: '{{ player.entity_id }}'
            data:
              media_content_id: '{{ player.media_content_id }}'
              media_content_type: '{{ player.media_content_type }}'
              extra:
                metadata: '{{ medadata if picture_url == ''no pic'' else dict(metadata,
                  **picture) }}

                  '
          - wait_template: '{{ is_state_attr(player.entity_id, ''media_content_id'',
              player.media_content_id) }}'
          - alias: Play
            service: media_player.media_play
            target:
              entity_id: '{{ player.entity_id }}'
  - alias: Check if resume_action_false group exists
    choose:
    - conditions: "{{ \n  integration_entities('group') \n    | select('search', 'resume_action_false_ghresume_'\
        \ ~ context.id)\n    | list \n    | count > 0 \n}}\n"
      sequence:
      - alias: Remove entity from group
        service: group.set
        data:
          object_id: resume_action_false_ghresume_{{ context.id }}
          name: Entities with actions which should not be resumed
          icon: mdi:alert-octagon
          entities: '{%- set current = state_attr(''group.resume_action_false_ghresume''
            ~ context.id, ''entity_id'') %} {{ iif(current == none, [], current) |
            reject(''eq'', player.entity_id) | list }}

            '
  - alias: Remove entity from group
    service: group.set
    data:
      object_id: resume_active_ghresume_{{ context.id }}
      name: Entities currently active with Google Home Resume script
      icon: mdi:autorenew
      entities: '{%- set current = state_attr(''group.resume_active'', ''entity_id'')
        %} {{ iif(current == none, [], current) | reject(''eq'', player.entity_id)
        | list }}

        '
  - alias: Check if resume_script_active group exists
    choose:
    - conditions: "{{ \n  integration_entities('group')\n    | select('search', 'resume_script_active_ghresume_'\
        \ ~ context.id)\n    | list\n    | count > 0\n}}\n"
      sequence:
      - alias: Remove entity from group
        service: group.set
        data:
          object_id: resume_script_active_ghresume_{{ context.id }}
          name: Entities currently active with Google Home Resume script
          icon: mdi:play-box
          entities: '{%- set current = state_attr(''group.resume_active_ghresume''
            ~ context.id, ''entity_id'') %} {{ iif(current == none, [], current) |
            reject(''eq'', player.entity_id) | list }}

            '
